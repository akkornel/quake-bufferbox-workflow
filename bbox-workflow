#!/usr/bin/perl -w

use strict;
use warnings;

use Cwd;
use Email::MIME;
use Email::Send;
use FindBin qw($RealBin $RealScript);
use Fcntl qw(:flock);
use IPC::Open3;
use Symbol qw(gensym);
use Sys::Hostname;


# First, let's set our "constants".  These are settings that aren't likely to
# change much (that's why they're in code, not in a config file).

# $TIMEOUT1 is how long we should wait, in minutes, for an "RTAComplete.txt"
# file to appear.
# We set this to 5 days.
# 5 (days) * 24 (hours) * 60 (minutes)
my $TIMEOUT1 = 7200;

# $RUNCOMMAND is the command we will run.
my @RUNCOMMAND = (qw(
bcl2fastq -l WARNING -o Data/Intensities/BaseCalls -p 9 -d 2 --no-lane-splitting
));

# Next, let's make a big list of global variables.  These all initially start
# out as undefined, and are filled in as we go along.

# $SEARCHFOLDER is the path to the directory that we look in when we are doing a
# "scan" operation.  In other words, $SEARCHDIR is where all the run folders
# live.
my $SEARCHFOLDER = undef;

# $RUNFOLDER is the path to the run folder.  Initially it contains the output
# from the instrument (the instrument copies it directly), and later on it
# will contain output from the analysis program, plus our logs.
my $RUNFOLDER = undef;

# $LOCKPATH is the path to the "workflow-lock.txt" file.  This file should
# only exist while a copy of bbox-workflow is running.
my $LOCKPATH = undef;

# $LOCKHANDLE is a File Handle pointing to $LOCKPATH
my $LOCKHANDLE = undef;

# $LOGPATH is the path to the "workflow-log.txt" file.
my $LOGPATH = undef;

# $LOGHANDLE is a File Handle pointing to $LOGPATH
my $LOGHANDLE = undef;

# $LOG contains messages that we haven't written to a log file yet.
# This is only useful when $LOGPATH is undefined.
my $LOG = "";

# $ACTION is what we are going to do.  It can be "scan", "run", or "deliver".
my $ACTION = undef;


# Now, let's do stuff!
# First, let's see if we have our email recipients file


check_email("$RealBin/email-recipients.txt");


# Next, we're going to find out what our action is


# We should have at least one argument from the command line
if (scalar(@ARGV) < 1) {
	log_msg(<<"EOL");
Please specify an action to perform, like 'scan' or 'run'.
For example: $RealScript scan NextSeq
Or: $RealScript run NextSeq/160804-NS500126-123-BDGEJMGM
Or you can just say `$RealScript help` !
EOL
	exit 1;
}


# First, we need to see what action we're going to perform.
# Let's also set up code to run for each action.
$ACTION = shift @ARGV;
my %possible_actions;


$possible_actions{help} = sub {
	print <<"EOF";
The $0 command can be run in four different ways:

$0 help              <-- This is what you're doing now
$0 scan DIRECTORY    <-- Scan a directory for new run folders
$0 run RUNFOLDER     <-- Run (or re-run) the analysis on a given run folder
$0 deliver RUNFOLDER <-- Deliver results from a completed run folder.

The "scan" action is used to watch a directory for new run folders.  When a
run folder is found, it is checked to see if the workflow process has already
run on it (by looking for a "workflow-complete.txt" file) or if the workflow
process is running on it right now (by looking for a "workflow-lock.txt" file).
If a new run folder is found, then the "run" action is begun on it.  This
process continues until all run folders have been examined, and then the
workflow program exits.

The "scan" action is meant to be run automatically, for example every 15
minutes.

The "run" action is used to run, or re-run, the analysis on a specific run
folder.  This is used in three cases:

1: When the "scan" action is not being used.
2: When a previous run failed.
3: When a previous run completed, but something needs to be changed.

The "run" action will not run on a run folder that is already in use, but it
_will_ run on run folders that have already been processed.  When run on an
already-processed rundir, existing analysis results (the "Project_" directories)
will be renamed (by appending ".old" to them).  Old logs will also be kept
(again, by appending ".old" to them).

The "deliver" action is used to deliver the analysis results to a user, by
copying them to the user's home directory.

The "deliver" action must be run as root, because it requires access to
other user's home directories.

Emails are sent in the following cases:

* When an analysis fails, or there is some other problem with a run folder.
* When an analysis completes successfully.
* When a delivery is completed.
* When a delivery cannot be completed, because a home directory is missing.

Emails are sent to the addresses listed in $RealBin/email-recipients.txt

If you have any more questions, please email
research-computing-support\@stanford.edu !
EOF
};

$possible_actions{scan} = sub {
	# Get the search directory from the command line
	if (scalar(@ARGV) < 1) {
		log_msg(<<"EOL");
When using the `scan` action, please provide the path to a directory to search.
For example: $RealScript scan MiSeq
EOL
		exit 1;
	}
	my $candidate_searchfolder = shift @ARGV;

	# Make sure the search folder is valid, and also set $SEARCHFOLDER
	$SEARCHFOLDER = validate_path($candidate_searchfolder);
	if (!defined($SEARCHFOLDER)) {
		log_msg(<<"EOL");
The search folder you provided does not exist, is not a directory, or cannot
be read.  Please re-run your command with a valid folder path.
The path your provided is: $candidate_searchfolder
EOL
		exit 1;
	}
	log_msg("Searching $SEARCHFOLDER for candidate runfolders...\n");

	# Open the search folder, and start looking at what's inside
	my $searchfolder_handle;
	opendir($searchfolder_handle, $SEARCHFOLDER) or do {
		log_msg(<<"EOL");
We just got an error when trying to open a directory.
The directory we tried accessing is: $SEARCHFOLDER
The error message we received is: $!
EOL
		exit 1;
	};
	while (my $candidate_runfolder = readdir($searchfolder_handle)) {
		log_msg("Found candidate $candidate_runfolder\n");

		# Skip dot files
		if ($candidate_runfolder =~ m{\A[.]}xims) {
			log_msg("... Skipping dotfile.\n");
			next;
		}

		# Skip non-directories
		if (! -d "$SEARCHFOLDER/$candidate_runfolder") {
			log_msg("... Skipping.  Not a directory.\n");
			next;
		}

		# Skip if we have a workflow-complete.txt file
		if (-r "$SEARCHFOLDER/$candidate_runfolder/workflow-complete.txt") {
			log_msg("... workflow-complete.txt found.  Skipping.\n");
			next;
		}
		
		# Skip if we have a workflow-lock.txt file
		if (-r "$SEARCHFOLDER/$candidate_runfolder/workflow-lock.txt") {
			log_msg("... workflow-lock.txt found.  Skipping.\n");
			next;
		}

		# We have a candidate!  Run against it, and exit
		log_msg("Time to run!\n");
		closedir($searchfolder_handle);
		unshift @ARGV, "$SEARCHFOLDER/$candidate_runfolder";
		&{$possible_actions{run}}();
		return 1;
	}

	# If we hit this point, we didn't find anything, so exit
	log_msg("No viable candidates found.  Exiting.\n");
	closedir($searchfolder_handle);
	return 1;
};

$possible_actions{run} = sub {
	# Get the run folder from the command line
	if (scalar(@ARGV) < 1) {
		log_msg(<<"EOL");
When using the `run` action, please provide the path to the run folder.
For example: $RealScript run 160804-NS500126-0555-ABCDEFG
EOL
		exit 1;
	}
	my $candidate_runfolder = shift @ARGV;

	# Make sure the run folder is valid, and also set $RUNFOLDER
	$RUNFOLDER = validate_path($candidate_runfolder);
	if (!defined($RUNFOLDER)) {
		log_msg(<<"EOL");
The run folder you provided does not exist, is not a directory, or cannot be
read.  Please re-run your command with a valid folder path.
The path you provided is: $candidate_runfolder
EOL
		exit 1;
	}

	# Let's also set $SEARCHFOLDER, $LOGPATH, and $LOCKPATH
	$SEARCHFOLDER = Cwd::abs_path("$RUNFOLDER/../..");
	$LOGPATH = "$RUNFOLDER/workflow-log.txt";
	$LOCKPATH = "$RUNFOLDER/workflow-lock.txt";

	# Get a lock on our run folder
	lock_get() or exit(1);

	# Start logging to file
	log_open() or exit(1);

	# Wait for RTAComplete.txt to appear
	log_msg("Waiting for $RUNFOLDER/RTAComplete.txt to appear...\n");
	while ($TIMEOUT1 > 0) {
		# If the file exists, then stop the loop
		if (-r "$RUNFOLDER/RTAComplete.txt") {
			log_msg("File found!\n");
			last;
		}

		# If the file doesn't exist yet, wait a minute and try again
		$TIMEOUT1--;
		sleep(60);
	}
	# If we timed out, then exit.
	if ($TIMEOUT1 == 0) {
		log_msg("Gave up waiting for $RUNFOLDER/RTAComplete.txt\n");
		log_failure("Gave up waiting for RTAComplete.txt to appear",
		            'run', $RUNFOLDER, "$RealBin/email-recipients.txt",
		            $LOGPATH, $LOG);
		return;
	}

	# Check to see if we have any Project directories
	my $basecalls_path = "$RUNFOLDER/Data/Intensities/BaseCalls";
	my $basecalls_handle;
	opendir($basecalls_handle, $basecalls_path) or do {
		log_msg(<<"EOF");
The BaseCalls directory does not exist, is not a directory, or cannot be read.
Please make sure you are running this command with a valid run folder!
The directory we are trying to open is: $basecalls_path
The error we are getting is: $!
EOF
		return;
	};
	while (readdir($basecalls_handle)) {
		# Find any directories whose name starts with "Project_"
		next unless $_ =~ m{\A        # Start of string
		                    (         # Start capturing match
		                    Project_  # "Project_"
		                    [a-z0-9]+ # One or more letters/numbers
		                    )         # End capture
		                    \z        # End of string
		                   }xims;

		# Rename the directory (this might recurse)
		log_msg(<<"EOF");
We found an existing Project directory: $1.
We are renaming this to $1.old.
(If that directory already exists, we'll add another ".old" to that one,
and so on, and so on, and ....)
EOF
		my $old_project_path = "$basecalls_path/$1";
		directory_rename($old_project_path);
	}

	# Get ready to run the analysis command
	log_msg("Running the analysis!\n");
	log_msg("Analysis command: " . join(' ', @RUNCOMMAND) . "\n");
	log_msg("Analysys command output:\n");
	log_msg("==========================================================\n");

	# Actually run the analysis command.
	# We send all output to the log directly.  We also make a file handle
	# for input, but then we immediately close it (we don't need it).
	my $input_handle;
	my $output_handle = gensym();
	my $analysis_buffer = '';
	chdir($RUNFOLDER);
	my $analysis_pid = open3($input_handle, $output_handle,
	                         0, @RUNCOMMAND);
	close($input_handle);
	while (read($output_handle, $analysis_buffer, 10)) {
		log_msg($analysis_buffer);
		$analysis_buffer = '';
	}
	waitpid($analysis_pid, 0);
	close($output_handle);

	# Clean up from the analysis command
	my $analysis_exit_code = $? >> 8;
	log_msg("==========================================================\n");
	log_msg("The analysis program returned exit code $analysis_exit_code\n");

	# Send an email regarding the analysis
	if ($analysis_exit_code == 0) {
		log_msg("That's good! 8-)\n");
		email_analysis($RUNFOLDER, "$RealBin/email-recipients.txt",
		               $LOGPATH) or do {
			email_failure('Problems sending the post-analysis mail',
			              'run', $RUNFOLDER,
				      "$RealBin/email-recipients.txt", $LOGPATH,
				      $LOG);
		};
	} else {
		log_msg("That's bad 8-(\n");
		email_failure('The analysis program had an error',
		              'run', $RUNFOLDER,
		              "$RealBin/email-recipients.txt", $LOGPATH, $LOG);
	}

	log_msg("Creating workflow-complete.txt marker file\n");
	my $complete_path = "$RUNFOLDER/workflow-complete.txt";
	my $complete_handle;
	open($complete_handle, '>', $complete_path) or do {
		log_msg(<<"EOF");
Unable to open the workflow-complete.txt file for writing!
Tried to open this file: $complete_path
Here is the error we received: $!
EOF
		return;
	};
	print $complete_handle 'Workflow completed at ', localtime(time()), "\n";
	close($complete_handle);
};

# Now that we have our actions, let's execute the code
if (exists($possible_actions{$ACTION})) {
	# We are getting a subroutine reference from a Perl hash, dereferencing
	# it, and calling it.
	&{$possible_actions{$ACTION}};
}
else {
	log_msg(<<"EOL");
The action you specified, $ACTION, is not a known action.
You have three possible actions:
* scan: Scan a given directory for unprocessed work folders.
* run: Process (or re-process) a given work folder.
* deliver: Deliver the analysis results from a given work folder.
EOL
}

# That's it!  Let's exit
log_close();
lock_release();
exit 0;


#
# Logging and Locking Subroutines Go Here
# 


# Open our log file
sub log_open {
	# If our log file exists, then rename it by appending ".old".
	if (-r $LOGPATH) {
		log_rename($LOGPATH);
	}

	# Try opening our log file, and set autoflush
	# autoflush, in particular, is important: If we don't do that, and we
	# have to send the log file somewhere, it might not all be written to
	# disk.
	open($LOGHANDLE, '>', $LOGPATH) or do {
		log_msg(<<"EOL");
We are having trouble opening the log file.
The file we tried to create is: $LOGPATH
The error we got is: $!
EOL
		return 0;
	};
	my $old_handle = select($LOGHANDLE);
	$| = 1;
	select($old_handle);

	# Put a header into the log file.
	# Also, if we have anything in our holding variable, output it.
	my $start_time = localtime(time());
	$LOG = <<"EOL";
This is the log of the bbox-workflow program!
This log file was started on: $start_time
If you need help, please email research-computing-support\@stanford.edu
$LOG
EOL
	print $LOGHANDLE $LOG;
	$LOG = '';

	# The log is ready to go!
	return 1;
}

# Rename a log file, by appending .old
# We make this a separate subroutine because we might recurse.
sub log_rename {
	my ($file) = @_;
	if (-r "$file.old") {
		log_rename("$file.old");
	}
	rename($file, "$file.old");
	return 1;
}

# Close the log
sub log_close {
	return unless defined($LOGHANDLE);
	my $end_time = localtime(time());
	print $LOGHANDLE <<"EOL";
The time is now $end_time.
Logging complete!
EOL

	close($LOGHANDLE);
	undef $LOGHANDLE;
	return 1;
}
	
# Log stuff
sub log_msg {
	my ($message) = @_;

	# First, print the log entry to standard output
	print $message;

	# Next, if the log file is open, output it there.
	# If the log file isn't open, then write to our holding variable.
	if (defined($LOGHANDLE)) {
		print $LOGHANDLE $message;
	} else {
		$LOG .= $message;
	}
}

# Create and lock our lock file
sub lock_get {
	# We already have $LOCKPATH set globally, so we'll use that.

	# First, open the lock file, in append mode.
	# We open in append mode because we don't want to change anything
	# immediately.  We'll wait for the lock first.
	open ($LOCKHANDLE, '>>', $LOCKPATH) or do {
		log_msg(<<"EOL");
We have just tried to create/open the following file:
$LOCKPATH
However, we got this error: $!
This should not happen.  Please contact Support!
EOL
		return 0;
	};

	# Actually take the lock.  If already locked, fail immediately.
	flock($LOCKHANDLE, LOCK_EX | LOCK_NB) or do {
		log_msg(<<"EOL");
It appears that the run folder you specified is already being actively worked
on by another instance of the workflow program.  You should wait for that other
instance to complete.  To see what it's doing, you can look at the log file,
which should be here: $LOGPATH
EOL
		return 0;
	};

	# We are locked!  Write in our process ID, and return.
	truncate($LOCKHANDLE, 0);
	print $LOCKHANDLE "$$\n";
	log_msg("Lock file $LOCKPATH locked.\n");
	return 1;
}

# Release our lock
sub lock_release {
	# We already have everything set globally
	return unless defined($LOCKHANDLE);
	unlink($LOCKPATH);
	flock($LOCKHANDLE, LOCK_UN);
	close($LOCKHANDLE);
	undef $LOCKHANDLE;
	return 1;
}


#
# Email Subroutines Go Here
#


# check_email: Check (and create) the email configuration file
sub check_email {
	my ($path) = @_;

	# Only create if the file doesn't exist
	if (! -r $path) {
		log_msg("Missing $path.  Creating now.\n");
		my $email_handle;
		open($email_handle, '>', $path) or do {
			log_msg(<<"EOF");
We are having problems creating one of our configuration files.
The file we are trying to create is: $path
The error we are getting is: $!
EOF
			return 0;
		};

		print $email_handle <<EOF;
# This file contains the list of email addresses what should be notified
# whenever something happens.  "something" includes things like...
# * A run completing, but something being wrong with the sample sheet.
# * A run completing, and being analyzed successfully.
# * A run folder appearing, but never completing.
#
# The format of this file is simple:
# * Empty lines are ignored.
# * Lines which start with a hash (like this one) are ignored.
# * Other lines are treated as email addresses.
# To add email addresses, simply add the email address on a new line.
#
# NOTE: This file is read right before bbox-workflow tries to send an email.

nobody\@stanford.edu
EOF

		close($email_handle);
	}

	return 1;
}


# email_recipients: Parse our email config file to get a list of recipients
sub email_recipients {
	my ($path) = @_;

	my $email_handle;
	open($email_handle, '<', $path) or do {

	};

	# Go through each line, building our address list
	my @list;
	while (my $line = <$email_handle>) {
		# Remove any line endings.  We need to do this specially in case
		# the file was modified on Windows.
		$line =~ s{\A(\S+)[\r\n]*\z}{$1}xims;

		# Skip blank lines and comments
		next if $line =~ m{\A\s+\z}xims;
		next if $line =~ m{\A\#}xims;

		# Read each line as an email address
		push @list, $line;
	}

	# Return a comma-separated string
	return join(',', @list);
}


# email_analysis: Send an email when the analysis is complete
# $runfolder: The path to the run folder.
# $config: Our email recipients config file.
# $log_path: The path to the log file.
sub email_analysis {
	my ($runfolder, $config, $log_path) = @_;

	# Create the body part
	my $email_body = Email::MIME->create(
		attributes => {
			content_type => 'text/plain',
			charset      => 'UTF-8',
			encoding     => 'quoted-printable',
		}
	);
	my $email_body_text = "Hello!\n\nThis is $RealScript, running on ";
	$email_body_text .= hostname() . '.  ';
	$email_body_text .= <<"EOF";
An analysis has just been completed, using the data in the following run folder:

$runfolder

The log from the run is being attached as "workflow-log.txt", along with
"laneBarcodes.html".

If everything looks good, you can deliver the files to the client by running
the following command:

sudo $RealBin/$RealScript deliver $runfolder

(You can just copy/paste the above line into a PuTTY or SecureCRT session.)

If you still need assistance, please forward this mail (with attachments) to research-computing-support\@stanford.edu.

Have a good day!

~ Mr. Workflow
EOF
	$email_body->body_str_set($email_body_text);

	# Create the log file attachment
	my $email_log = Email::MIME->create(
		attributes => {
			disposition  => 'attachment',
			name         => 'workflow-log.txt',
			content_type => 'text/plain',
			charset      => 'iso-8859-1',
			encoding     => 'base64',
		},
	);

	# We should have a log file, so read it into memory
	my $log_handle;
	my $log_body = '';
	open($log_handle, '<', $log_path) or do {
		log_msg(<<"EOF");
We have just encounted a problem when trying to re-open our log file.
The file we were trying to read is: $log_path
The error we got is: $!
EOF
		return 0;
	};
	while (my $line = <$log_handle>) {
		$log_body .= $line . "\n";
	}
	$email_log->body_set($log_body);
	close ($log_handle);
	undef $log_body;

	# Create the laneBarcode attachment
	my $email_barcode = Email::MIME->create(
		attributes => {
			disposition  => 'attachment',
			name         => 'laneBarcode.html',
			content_type => 'text/html',
			charset      => 'iso-8859-1',
			encoding     => 'base64',
		},
	);

	# Get the laneBarcode HTML file, and read it into memory
	my $barcode_path = barcode_path($RUNFOLDER);
	return 0 unless defined($barcode_path);
	my $barcode_handle;
	my $barcode_body = '';
	open($barcode_handle, '<', $barcode_path) or do {
		log_msg(<<"EOF");
We have just encountered a roblem when trying to open the landBarcode HTML file.
The file we were trying to read is: $barcode_path
The error we got is: $!
EOF
		return 0;
	};
	while (my $line = <$barcode_handle>) {
		$barcode_body .= $line . "\n";
	}
	$email_barcode->body_set($barcode_body);
	close($barcode_handle);
	undef $barcode_body;

	# Create the email
	my $email_subject = "Completed analysis by $RealScript on " .
	                    hostname();
	my $email = Email::MIME->create(
		header_str => [
			From    => 'noreply@stanford.edu',
			To      => email_recipients($config),
			Subject => $email_subject,
		],
		parts      => [ $email_body, $email_log, $email_barcode ],
	);
	log_msg('Sending a ' . length($email->as_string) . '-byte email to ');
	log_msg(email_recipients($config) . "\n");

	# Send the email
	my $email_sender = Email::Send->new({
		mailer      => 'SMTP',
		mailer_args => [
			Host => 'smtp-unencrypted.stanford.edu',
		],
	});
	my $send_result = $email_sender->send($email->as_string);
	if (!$send_result) {
		log_msg("Error sending email: $send_result\n");
		return 0;
	}

	# Finally, done!
	return 1;
}

# email_failure: Send an email when something goes wrong
# $message: A message explaining what happened.
# $action: The action being performed.
# $runfolder: The path to the run folder.
# $config: Our email recipients config file.
# $log_path: The path to the log file, or undef (if there is no log file).
# $log_ref: A scalar ref, pointing to and unwritten log content.
sub email_failure {
	my ($message, $action, $runfolder, $config, $log_path, $log_ref) = @_;

	# Create the body part
	my $email_body = Email::MIME->create(
		attributes => {
			content_type => 'text/plain',
			charset      => 'UTF-8',
			encoding     => 'quoted-printable',
		}
	);
	my $email_body_text = "Hello!\n\nThis is $RealScript, running on ";
	$email_body_text .= hostname() . '.  ';
	$email_body_text .= <<"EOF";
I am emailing you to report that something went wrong.

Here's a couple-word summary of what's going on:

> $message

If a log is available, it is being attached as "workflow-log.txt".

When you have a moment, please investigate.  To re-run the workflow, use the following command:

$RealBin/$RealScript $action $runfolder

(You can just copy/paste the above line into a PuTTY or SecureCRT session.)

If you still need assistance, please forward this mail (with attachments) to research-computing-support\@stanford.edu.

Apologies for the inconvenience!

~ Mr. Workflow
EOF
	$email_body->body_str_set($email_body_text);

	# Create the log file attachment
	my $email_file = Email::MIME->create(
		attributes => {
			disposition  => 'attachment',
			name         => 'workflow-log.txt',
			content_type => 'text/plain',
			charset      => 'iso-8859-1',
			encoding     => 'base64',
		},
	);

	# If we have a log file, then re-read it into memory
	if (defined($log_path)) {
		my $log_handle;
		my $log_body = '';
		open($log_handle, '<', $log_path) or do {
			log_msg(<<"EOF");
We have just encounted a problem when trying to re-open our log file.
This happened while trying to report an error.
The file we were trying to read is: $log_path
The error we got is: $!
EOF
			return 0;
		};
		while (my $line = <$log_handle>) {
			$log_body .= $line . "\n";
		}
		$email_file->body_set($log_body);
	} else {
		# If there's no log file, then use what's in memory already.
		$email_file->body_str_set($$log_ref);
	}

	# Create the email
	my $email_subject = "Something went wrong with $RealScript on " .
	                    hostname();
	my $email = Email::MIME->create(
		header_str => [
			From    => 'noreply@stanford.edu',
			To      => email_recipients($config),
			Subject => $email_subject,
		],
		parts      => [ $email_body, $email_file ],
	);
	log_msg('Sending a ' . length($email->as_string) . '-byte email to ');
	log_msg(email_recipients($config) . "\n");

	# Send the email
	my $email_sender = Email::Send->new({
		mailer      => 'SMTP',
		mailer_args => [
			Host => 'smtp-unencrypted.stanford.edu',
		],
	});
	my $send_result = $email_sender->send($email->as_string);
	if (!$send_result) {
		log_msg("Error sending email: $send_result\n");
		return 0;
	}

	# Finally, done!
	return 1;
}


#
# Other Subroutines Go Here
# 


# Given a runfolder, return the path to the laneBarcode.html file
sub barcode_path {
	my ($runfolder) = @_;

	# Start by appeding what we know about the path
	my $html_path = "$runfolder/Data/Intensities/BaseCalls/Reports/html";

	# Look in our html_path for a directory
	my $html_handle;
	my $html_dir;
	opendir($html_handle, $html_path) or do {
		log_msg(<<"EOF");
We have just run into problems trying to find the laneBarcode.html file
The directory we tried to access is: $html_path
The error we got is: $!
EOF
		return undef;
	};
	while (my $candidate = readdir($html_handle)) {
		next unless -d "$html_path/$candidate";
		$html_dir = "$html_path/$candidate";
	}
	closedir($html_handle);

	# If we found our directory, then return the full path
	if (defined($html_dir)) {
		return "$html_dir/all/all/all/laneBarcode.html";
	} else {
		return undef;
	}
}

# Make sure a path is valid
sub validate_path {
	my ($path) = @_;

	if (   (-r $path)
	    && (-x $path)
	    && (-d $path)
	) {
		$path = Cwd::abs_path($path);
		return $path;
	} else {
		return undef;
	}
}

# Append .old to a directory
sub directory_rename {
	my ($path) = @_;
	my $new_name = "$path.old";
	if (-r $new_name) {
		directory_rename($new_name);
	}
	rename($path, $new_name);
}
