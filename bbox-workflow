#!/usr/bin/perl -w

use strict;
use warnings;

use Cwd;
use FindBin qw($RealScript);
use Fcntl qw(:flock);


# First, let's make a big list of global variables.  These all initially start
# out as undefined, and are filled in as we go along.

# $SEARCHFOLDER is the path to the directory that we look in when we are doing a
# "scan" operation.  In other words, $SEARCHDIR is where all the run folders
# live.
my $SEARCHFOLDER = undef;

# $RUNFOLDER is the path to the run folder.  Initially it contains the output
# from the instrument (the instrument copies it directly), and later on it
# will contain output from the analysis program, plus our logs.
my $RUNFOLDER = undef;

# $LOCKPATH is the path to the "workflow-lock.txt" file.  This file should
# only exist while a copy of bbox-workflow is running.
my $LOCKPATH = undef;

# $LOGPATH is the path to the "workflow-log.txt" file.
my $LOGPATH = undef;

# $LOGHANDLE is a File Handle pointing to $LOGPATH
my $LOGHANDLE = undef;

# $LOG contains messages that we haven't written to a log file yet.
# This is only useful when $LOGPATH is undefined.
my $LOG = "";

# $ACTION is what we are going to do.  It can be "scan", "run", or "deliver".
my $ACTION = undef;




# Now, let's do stuff!
# First, we're going to find out what our action is


# We should have at least one argument from the command line
if (scalar(@ARGV) < 1) {
	log_msg(<<"EOL");
Please specify an action to perform, like 'scan' or 'run'.
For example: $RealScript scan NextSeq
Or: $RealScript run NextSeq/160804-NS500126-123-BDGEJMGM
Or you can just say `$RealScript help` !
EOL
	exit 1;
}


# First, we need to see what action we're going to perform.
# Let's also set up code to run for each action.
$ACTION = shift @ARGV;
my %possible_actions;


$possible_actions{help} = sub {
	print "Help goes here!\n";
};

$possible_actions{scan} = sub {
	print "Not ready yet!\n";
};

$possible_actions{run} = sub {
	# Get the run folder from the command line
	if (scalar(@ARGV) < 1) {
		log_msg(<<"EOL");
When using the `run` action, please provide the path to the run folder.
For example: $RealScript run 160804-NS500126-0555-ABCDEFG
EOL
		exit 1;
	}
	my $candidate_runfolder = shift @ARGV;

	# Make sure the run folder is valid, and also set $SEARCHFOLDER
	$RUNFOLDER = validate_path($candidate_runfolder);
	if (!defined($RUNFOLDER)) {
		log_msg(<<"EOL");
The run folder you provided does not exist, is not a directory, or cannot be
read.  Please re-run your command with a valid folder path.
The path you provided is: $candidate_runfolder
EOL
		exit 1;
	}
	$SEARCHFOLDER = Cwd::abs_path("$RUNFOLDER/../..");
};

# Now that we have our actions, let's execute the code
if (exists($possible_actions{$ACTION})) {
	# We are getting a subroutine reference from a Perl hash, dereferencing
	# it, and calling it.
	&{$possible_actions{$ACTION}};
}
else {
	log_msg(<<"EOL");
The action you specified, $ACTION, is not a known action.
You have three possible actions:
* scan: Scan a given directory for unprocessed work folders.
* run: Process (or re-process) a given work folder.
* deliver: Deliver the analysis results from a given work folder.
EOL
}

# That's it!  Let's exit
exit 0;


#
# Support Subroutines Go Here
# 


# Log stuff
sub log_msg {
	my ($message) = @_;

	# First, print the log entry to standard output
	print $message, "\n";

	# Next, if the log file is open, output it there
	if (defined($LOGHANDLE)) {
		print $LOGHANDLE $message;
	}
}


# Make sure a path is valid
sub validate_path {
	my ($path) = @_;

	if (   (-r $path)
	    && (-x $path)
	    && (-d $path)
	) {
		$path = Cwd::abs_path($path);
		return $path;
	} else {
		return undef;
	}
}
